package com.example.casobq;


import java.util.ArrayList;


//import com.evernote.android.sample.R;
import com.evernote.client.android.EvernoteSession;
import com.evernote.client.android.OnClientCallback;
import com.evernote.edam.notestore.NoteFilter;
import com.evernote.edam.notestore.NoteMetadata;
import com.evernote.edam.notestore.NotesMetadataList;
import com.evernote.edam.notestore.NotesMetadataResultSpec;
import com.evernote.edam.type.NoteSortOrder;
import com.evernote.thrift.transport.TTransportException;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ListView;
import android.widget.Spinner;
import android.widget.Toast;

public class MainActivity extends Activity {
	
	protected EvernoteSession mEvernoteSession;
	private static final EvernoteSession.EvernoteService EVERNOTE_SERVICE = EvernoteSession.EvernoteService.SANDBOX;
	
	private Spinner spinnerOrden;
	private ArrayList<String> notesNames;
	private ArrayList<String> notesGuid;
    private ArrayAdapter<String> mAdapter;
    private ListView listaNotas;
	protected String Titulo;
	protected String Contenido;
    
    
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
       
        //Para iniciar sesión con la aplicación de prueba se le proporciona la Api Key y el Secret
        mEvernoteSession = EvernoteSession.getInstance(this, "jcabfer06", "f36faea248456605", EVERNOTE_SERVICE, true);
        mEvernoteSession.authenticate(this);
        
        //Poner en el spinner las dos opciones de ordenación de notas
        spinnerOrden = (Spinner) findViewById(R.id.spinner1);
		ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this,
		        R.array.Opciones, android.R.layout.simple_spinner_item);
		adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
	    //Aplicar el adapter al spinner
		spinnerOrden.setAdapter(adapter);
     
		Button botonCrear = (Button)findViewById(R.id.buttonCrear);
		botonCrear.setOnClickListener(crearListener);
		
		spinnerOrden.setOnItemSelectedListener(cambiarOrden);
		
		notesNames = new ArrayList();
		notesGuid = new ArrayList();
        mAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, notesNames);
        listaNotas = (ListView)findViewById(R.id.listView_notas);
        listaNotas.setAdapter(mAdapter);
        
        listaNotas.setClickable(true);
        listaNotas.setOnItemClickListener(ampliarNotaListener);
        
        encontrarNotas(0);
    }
    
    //La función que abrirá la nueva activity con la nota completa al hacer click sobre una nota concreta
    private OnItemClickListener ampliarNotaListener = new AdapterView.OnItemClickListener() {
    	public void onItemClick(AdapterView<?> parent, View view, int pos, long id) {

    		Titulo = notesNames.get(pos);
    		getContenidoNota(pos);
        }
    };
    
    //Esta es la función que responde cuando se cambia el orden del spinner de seleccion de ordenación
    private OnItemSelectedListener cambiarOrden = new AdapterView.OnItemSelectedListener() {
    	public void onItemSelected(AdapterView<?> parent, View view, int pos, long id) {
    		int posicion = spinnerOrden.getSelectedItemPosition();
    		//Posición indica cómo se van a ordenar las notas
    		encontrarNotas(posicion);
        }
    	public void onNothingSelected(AdapterView<?> parent) {
    		//No se hace nada
        }
    };
    
    private OnClickListener crearListener = new OnClickListener() {
    	public void onClick(View v) {
    		startActivity(new Intent(getApplicationContext(), CrearNota.class));
    	}
    };
    
    public void getContenidoNota(int numero) {
    	final String tit = notesNames.get(numero);
    	 try {
    	        final OnClientCallback<String> callback = new OnClientCallback<String>() {
    		            @Override
    		            public void onSuccess(String data) {
    		            	Contenido = data.substring(0, data.length()-tit.length()-3); 
    		            	//Una vez obtenido el contenido correctamente se inicia la nueva activity con la nota completa
    		            	Intent i = new Intent(getApplicationContext(), MostrarNota.class);
    		        		i.putExtra("Titulo", Titulo);
    		        		i.putExtra("Contenido", Contenido);
    		        		startActivity(i);
    		            }
    		
    		            @Override
    		            public void onException(Exception exception) {
    		            	 Toast.makeText(getApplicationContext(), "No se encontraron notas", Toast.LENGTH_LONG).show();
    		            }
    	          };
    	          
    	        //Obtener el contenido de la nota (se obtiene el contenido seguido del título)
    	    	mEvernoteSession.getClientFactory().createNoteStoreClient().getNoteSearchText(notesGuid.get(numero), true, false, callback);

    	        } catch (TTransportException exception){
    	        	 Toast.makeText(getApplicationContext(), "No se pudo crear el note store", Toast.LENGTH_LONG).show();
    	        }
    }
    
    public void encontrarNotas(int orden){
    	final int offset = 0;
        final int pageSize = 10;
        
        //Resetear la vista de las notas
        mAdapter.clear();
        
        final NoteFilter filter = new NoteFilter();
        if(orden == 0) {
        	filter.setOrder(NoteSortOrder.TITLE.getValue());
        } else {
        	filter.setOrder(NoteSortOrder.UPDATED.getValue());
        }
        
        final NotesMetadataResultSpec spec = new NotesMetadataResultSpec();
        spec.setIncludeTitle(true);
        spec.setIncludeTagGuids(true);
        
        try {
        final OnClientCallback<NotesMetadataList> callback = new OnClientCallback<NotesMetadataList>() {
	            @Override
	            public void onSuccess(NotesMetadataList data) {
	              //Toast.makeText(getApplicationContext(), "Notas encontradas", Toast.LENGTH_LONG).show();

	            	//Hay que vaciar el array de guid para que no se haga cada vez mas grande
	            	notesGuid.clear();
	              for (NoteMetadata note : data.getNotes()) {
	                String title = note.getTitle();
	                String notaguid = note.getGuid();
	                notesNames.add(title);
	                notesGuid.add(notaguid);
	              }
	              //Con esto se actualiza la vista de la lista de notas
	              mAdapter.notifyDataSetChanged();
	            }
	
	            @Override
	            public void onException(Exception exception) {
	            	 Toast.makeText(getApplicationContext(), "No se encontraron notas", Toast.LENGTH_LONG).show();
	            }
          };
        
    	mEvernoteSession.getClientFactory().createNoteStoreClient()
        	.findNotesMetadata(filter, offset, pageSize, spec, callback);
        } catch (TTransportException exception){
        	 Toast.makeText(getApplicationContext(), "No se pudo crear el note store", Toast.LENGTH_LONG).show();
        }
    }
}
